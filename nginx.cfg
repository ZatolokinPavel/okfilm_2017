############################################
### Конфигурация для сайта okfilm.com.ua ###
############################################


# Eсли был передан заголовок "Upgrade: websocket",
# тогда присваиваем переменной $connection_upgrade значение "upgrade".
# Иначе значением этой переменной будет пустая строка.
map $http_upgrade $connection_upgrade {
    websocket     'upgrade';
    default       '';
}

# Определение, из локальной или глобальной сети пришел пользователь.
geo $network_type {
    default        'global';
    192.168.0.0/16 'local';
}


# Вспомогательные uri, доступные по http
# и редирект с http на https
server {
    server_name     okfilm.com.ua;
    listen          80 default_server;
    location /availability_check {
        # не пишем в лог запросы от мониторилки, а то засырает логи
        if ($http_user_agent ~* "^OkFILM Monitoring") { access_log off; }
        default_type application/json;
        return 200 '{"code":"available", "message":"Availability check is successful"}';
    }
    location = /back/devices_control/wifi {     # запрос состояния Wi-Fi обрабатываем без https чтобы не грузить роутер
        if ($network_type = 'local') { access_log off; }    # не пишем в лог запросы от роутера, а то засырает логи
        proxy_pass http://127.0.0.1:8738;                   # проксируем на эрланг
    }
    location / {
        return 301 https://okfilm.com.ua$request_uri;
    }
}


# Основной сайт okfilm.com.ua
server {
    server_name     okfilm.com.ua;
    listen          443 ssl default_server;

    ssl_certificate         "/etc/letsencrypt/live/okfilm.com.ua/fullchain.pem";
    ssl_certificate_key     "/etc/letsencrypt/live/okfilm.com.ua/privkey.pem";
    ssl_trusted_certificate "/etc/letsencrypt/live/okfilm.com.ua/chain.pem";
    ssl_ciphers             EECDH:+AES256:-3DES:RSA+AES:RSA+3DES:!NULL:!RC4;    # разрешённые шифры

    ssl_stapling            on;     # прикрепление OCSP-ответов сервером
    ssl_stapling_verify     on;     # проверка сервером ответов OCSP
    resolver                127.0.0.1 8.8.8.8 ipv6=off;     # для преобразования имени хоста OCSP responder’а

    add_header Strict-Transport-Security "max-age=31536000";        # исключим возврат на http-версию сайта
    add_header Content-Security-Policy "block-all-mixed-content";   # явно "сломаем" все картинки с http://
    add_header Content-Security-Policy-Report-Only "
        default-src 'self';
        block-all-mixed-content;
        img-src 'self' https://cdn.okfilm.com.ua/;
    ";

    charset utf-8;                  # задаём кодировку отдаваемого контента (правильно именно utf-8 через дефис)

    server_name_in_redirect on;     # использовать в перенаправлениях основное имя сервера (server_name)
    port_in_redirect        off;    # не указывать порт в перенаправлениях

    # Правила перенаправления для частных случаев
    rewrite ^/photoalbum(.*)$ /photo$1 permanent;                   # photoalbum переехал в /photo
    rewrite ^/portfolio(.*)$ /photo$1 permanent;                    # portfolio переехал в photo
    rewrite ^/photo/lovestory/?$ /photo permanent;                  # отдельной страницы для lovestory не будет
    rewrite ^/photo/wedding/?$ /photo permanent;                    # отдельной страницы для wedding не будет
    rewrite ^/uslugi(.*)$ /more$1 permanent;                        # раздел "Услуги" стал называться "Ещё"
    rewrite ^/more/files/(.+\.([\w\d]+))$ /files/$1;                # файлы с сетевого диска возвращаются напрямую
    rewrite ^/more/files$ /more/files/ permanent;                   # добавляем в конце корневой папки слеш, если его не было
    rewrite ^/more/files/(.+[^/])$ /more/files/$1/ permanent;       # добавляем в конце папки слеш, если его не было
    rewrite ^/more/files/(?<file_path>.*)$ /more/files;             # для сетевого диска всегда одна страница
    rewrite ^/files/$ /more/files permanent;                        # корень сетевого диска закрыт от просмотра
    rewrite ^/ofa /back/ofa;                                        # подсчёт посещаемости
    rewrite ^/js/ofa.js /back/js/ofa.js;                            # скрипт подсчёта посещаемости

    # Запрещаем доступ к некоторым служебным файлам и папкам
    location /.git          { deny all; return 404; }
    location /.htaccess     { deny all; return 404; }
    location /nginx.cfg     { deny all; return 404; }
    location /README.md     { deny all; return 404; }
    location = /back/dev    { deny all; return 404; }
    location /back/dev/     { deny all; return 404; }               # этот адрес нужен только для разработки на локалке
    # Сразу отсекаем некоторые нежелательные запросы, чтобы не искать такие файлы и не срать в логи
    location /cgi           { access_log off; return 404; }
    location /php           { access_log off; return 404; }
    location /nopage        { access_log off; return 404; }

    location / {

        root /var/www/okfilm.com.ua/okfilm_2018;
        index index.htm index.shtml;

        # Правила перенаправления страниц сайта
        rewrite ^/([a-z0-9-/]+)/$ /$1;                              # игнорируем слеш в конце урла
        rewrite ^/([a-z0-9]+)$ /pages/$1.shtml;
        rewrite ^/([a-z0-9]+)/([a-z0-9-]+)$ /pages/$1/$2.shtml;
        rewrite ^/([a-z0-9]+)/([a-z0-9-]+)/([a-z0-9-]+)$ /pages/$1/$2/$3.shtml;

        # Пытаемся найти такой файл, потом такую папку, если нету - 404
        try_files $uri $uri/ =404;

        # Включаем обработку команд SSI в ответах (Server Side Includes)
        ssi on;

        # Включаем кеширование указанных файлов в браузере.
        # Если какой-то из этих файлов изменится, следует изменить его
        # версию, имя или путь, чтобы браузер перекачал файл.(?v=1)
        location ~* ^.+\.(rss|atom|jpg|jpeg|gif|png|ico|rtf|js|css)$ {
            expires 1w;
        }

        # Добавляем префикс к пути файла на сетевом диске
        set $shared_files /files/$file_path;
        # Если путь к файлу на сетевом диске не указан, то показываем заглушку.
        if ($shared_files = "/files/") {
            set $shared_files /include/files_cap.html;
        }
    }

    # Сетевой диск для раздачи файлов. Вложенные папки, но не корень.
    # При попытке посмотреть корень, перебрасываем на страницу с файлами.
    location /files {
        alias /var/www/shared-global;                   # Папка сетевого диска

        index protectionfromdisplayingindexfile.nofile; # Отключаем показ файлов index.html
        autoindex on;                                   # Включаем показ списка файлов в папке
        autoindex_exact_size off;
        autoindex_format html;
        autoindex_localtime on;

        # Если такого файла/папки не существует, показываем сообщение.
        try_files $uri $uri/ /include/files_not_found.html;

        # Делаем чтобы все файлы скачивались а не открывались.
        location ~* ^.*/(?P<filename>[^/]+\.([\w\d]+))$ {
            add_header Content-disposition 'attachment; filename="$filename"';
        }
    }

    # Вспомогательный адрес для получения сертификата Let's Encrypt
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        try_files $uri =404;    # Пытаемся найти такой файл, если нету - 404
    }

    # При запросе страниц бэковой части перебрасываем на эрланг
    location /back {
        # настройки проксирования на эрланг
        proxy_pass http://127.0.0.1:8738/back;
        proxy_set_header Host $host;                        # без особой надобности
        proxy_set_header X-Real-IP $remote_addr;            # для определения эрлангом реального IP клиента
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # всё что ниже нужно для работы вебсокетов
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;             # передаём заголовок "Upgrade: websocket", если он пришел от клиента
        proxy_set_header Connection $connection_upgrade;    # добавляем заголовок "Connection: Upgrade", если был передан заголовок "Upgrade: websocket"
    }
}

server {
    server_name     cdn.okfilm.com.ua;
    listen          80;
    listen          443 ssl;
    charset         utf-8;
    server_name_in_redirect on;

    ssl_certificate         "/etc/letsencrypt/live/okfilm.com.ua/fullchain.pem";
    ssl_certificate_key     "/etc/letsencrypt/live/okfilm.com.ua/privkey.pem";
    ssl_trusted_certificate "/etc/letsencrypt/live/okfilm.com.ua/chain.pem";
    ssl_ciphers             EECDH:+AES256:-3DES:RSA+AES:RSA+3DES:!NULL:!RC4;    # разрешённые шифры

    ssl_stapling            on;     # прикрепление OCSP-ответов сервером
    ssl_stapling_verify     on;     # проверка сервером ответов OCSP
    resolver                127.0.0.1 8.8.8.8 ipv6=off;     # для преобразования имени хоста OCSP responder’а

    location / {
        root /var/www/okfilm.com.ua/cdn;
        try_files $uri $uri/ =404;

        # Включаем кеширование указанных файлов в браузере.
        # Если какой-то из этих файлов изменится, следует изменить его
        # версию, имя или путь, чтобы браузер перекачал файл.(?v=1)
        location ~* ^.+\.(rss|atom|jpg|jpeg|gif|png|ico|rtf|js|css)$ {
            expires 1w;
        }
    }

    # Вспомогательный адрес для получения сертификата Let's Encrypt
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        try_files $uri =404;    # Пытаемся найти такой файл, если нету - 404
    }
}

# Редирект с www на домен без www https
server {
    server_name www.okfilm.com.ua;
    listen 80;
    listen 443;
    listen [::]:80;                 # IPv6 адрес:порт
    return 301 https://okfilm.com.ua$request_uri;
}
server {
    server_name "~^www\.(.+)\.okfilm\.com\.ua$";
    listen 80;
    listen [::]:80;                 # IPv6 адрес:порт
    return 301 $scheme://$1.okfilm.com.ua$request_uri;
}



server {
    server_name intellij.okfilm.com.ua;
    listen 1016;
    # При запросе страниц бэковой части перебрасываем на эрланг
    location / {
        # настройки проксирования на LicenseServer
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;                        # без особой надобности
    }
}
